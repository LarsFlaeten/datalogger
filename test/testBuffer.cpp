#include "../src/buffer.c"
#include <gtest/gtest.h>

#include <memory>
#include <cstdio>
#include <vector>

using namespace std;

// The fixture for testing buffer.c.
class BufferTest : public ::testing::Test {

protected:

    // set-up work for each test here.
    BufferTest();

    // clean-up work that doesn't throw exceptions here.
    virtual ~BufferTest();

    // If the constructor and destructor are not enough for setting up
    // and cleaning up each test, you can define the following methods:

    // Code here will be called immediately after the constructor (right
    // before each test).
    virtual void SetUp();

    // Code here will be called immediately after each test (right
    // before the destructor).
    virtual void TearDown();


    vector<uint8_t> test_pkt;
    vector<uint8_t> key;
    vector<uint8_t> len;
    vector<uint8_t> val;
    
};


BufferTest::BufferTest()
{
    test_pkt = { 0x06, 0x0E, 0x2B, 0x34, 0x02, 0x0B, 0x01, 0x01, 0x0E, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x81, 0x90, 0x02, 0x08, 0x00, 0x04, 0x6C, 0xAE, 0x70, 0xF9, 0x80, 0xCF, 0x41, 0x01, 0x01, 0x05, 0x02, 0xE1, 0x91, 0x06, 0x02, 0x06, 0x0D, 0x07, 0x02, 0x0A, 0xE1, 0x0B, 0x02, 0x49, 0x52, 0x0C, 0x0E, 0x47, 0x65, 0x6F, 0x64, 0x65, 0x74, 0x69, 0x63, 0x20, 0x57, 0x47, 0x53, 0x38, 0x34, 0x0D, 0x04, 0x4D, 0xCC, 0x41, 0x90, 0x0E, 0x04, 0xB1, 0xD0, 0x3D, 0x96, 0x0F, 0x02, 0x1B, 0x2E, 0x10, 0x02, 0x00, 0x84, 0x11, 0x02, 0x00, 0x4A, 0x12, 0x04, 0xE7, 0x23, 0x0B, 0x61, 0x13, 0x04, 0xFD, 0xE8, 0x63, 0x8E, 0x14, 0x04, 0x03, 0x0B, 0xC7, 0x1C, 0x15, 0x04, 0x00, 0x9F, 0xB9, 0x38, 0x16, 0x04, 0x00, 0x00, 0x01, 0xF8, 0x17, 0x04, 0x4D, 0xEC, 0xDA, 0xF4, 0x18, 0x04, 0xB1, 0xBC, 0x81, 0x74, 0x19, 0x02, 0x0B, 0x8A, 0x28, 0x04, 0x4D, 0xEC, 0xDA, 0xF4, 0x29, 0x04, 0xB1, 0xBC, 0x81, 0x74, 0x2A, 0x02, 0x0B, 0x8A, 0x38, 0x01, 0x31, 0x39, 0x04, 0x00, 0x9F, 0x85, 0x4D, 0x01, 0x02, 0xB7, 0xEB };

    key = { 0x06, 0x0E, 0x2B, 0x34, 0x02, 0x0B, 0x01, 0x01, 0x0E, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00 };
    len = { 0x81, 0x90 };
    val = { 0x02, 0x08, 0x00, 0x04, 0x6C, 0xAE, 0x70, 0xF9, 0x80, 0xCF, 0x41, 0x01, 0x01, 0x05, 0x02, 0xE1, 0x91, 0x06, 0x02, 0x06, 0x0D, 0x07, 0x02, 0x0A, 0xE1, 0x0B, 0x02, 0x49, 0x52, 0x0C, 0x0E, 0x47, 0x65, 0x6F, 0x64, 0x65, 0x74, 0x69, 0x63, 0x20, 0x57, 0x47, 0x53, 0x38, 0x34, 0x0D, 0x04, 0x4D, 0xCC, 0x41, 0x90, 0x0E, 0x04, 0xB1, 0xD0, 0x3D, 0x96, 0x0F, 0x02, 0x1B, 0x2E, 0x10, 0x02, 0x00, 0x84, 0x11, 0x02, 0x00, 0x4A, 0x12, 0x04, 0xE7, 0x23, 0x0B, 0x61, 0x13, 0x04, 0xFD, 0xE8, 0x63, 0x8E, 0x14, 0x04, 0x03, 0x0B, 0xC7, 0x1C, 0x15, 0x04, 0x00, 0x9F, 0xB9, 0x38, 0x16, 0x04, 0x00, 0x00, 0x01, 0xF8, 0x17, 0x04, 0x4D, 0xEC, 0xDA, 0xF4, 0x18, 0x04, 0xB1, 0xBC, 0x81, 0x74, 0x19, 0x02, 0x0B, 0x8A, 0x28, 0x04, 0x4D, 0xEC, 0xDA, 0xF4, 0x29, 0x04, 0xB1, 0xBC, 0x81, 0x74, 0x2A, 0x02, 0x0B, 0x8A, 0x38, 0x01, 0x31, 0x39, 0x04, 0x00, 0x9F, 0x85, 0x4D, 0x01, 0x02, 0xB7, 0xEB };



}

BufferTest::~BufferTest()
{

}
void BufferTest::SetUp()
{

}

void BufferTest::TearDown()
{

}



TEST_F(BufferTest, InitializationTests) {

    // test heap buffer
    sbuf_t      buf;
    sbuf_create(&buf, 32);
    ASSERT_EQ(buf.max_length, 32);
    ASSERT_EQ(buf.length, 0);

    for(uint8_t d = 0; d < 32; ++d)
        buf.data[d] = d;

    
    ASSERT_EQ(buf.data[1], 1);

    ASSERT_EQ(buf.data[7], 7);

    ASSERT_EQ(buf.data[14], 14);

    ASSERT_EQ(buf.data[27], 27);


    sbuf_release(&buf);

    // test stack buffer
    sbuf_t  stackbuf;
    sbuf_create_stack(&stackbuf, 64);
    ASSERT_EQ(stackbuf.max_length, 64);
    ASSERT_EQ(stackbuf.length, 0);

    for(uint8_t d = 0; d < 64; ++d)
        stackbuf.data[d] = d;


    ASSERT_EQ(stackbuf.data[1], 1);

    ASSERT_EQ(stackbuf.data[23], 23);

    ASSERT_EQ(stackbuf.data[14], 14);

    ASSERT_EQ(stackbuf.data[63], 63);
}

TEST_F(BufferTest, AddData) {
   

    sbuf_t buf, stackbuf;
    sbuf_create(&buf, 1014);
    sbuf_create_stack(&stackbuf, 1024); 

    int n1 = sbuf_add_data(&buf, &test_pkt[0], 162);
    int n2 = sbuf_add_data(&stackbuf, &test_pkt[0], 100);

    ASSERT_EQ(buf.length, 162);
    ASSERT_EQ(stackbuf.length, 100);
    ASSERT_EQ(n1, 162);
    ASSERT_EQ(n2, 100);


    // Spot checks
    ASSERT_EQ(buf.data[161], 0xEB);
    ASSERT_EQ(buf.data[12], 0x01);
    ASSERT_EQ(stackbuf.data[12], 0x01);
    ASSERT_EQ(stackbuf.data[19], 0x08);



    sbuf_release(&buf);
}

TEST_F(BufferTest, OverFlow)
{
    sbuf_t buf;
    sbuf_create(&buf, 144);

    int n = sbuf_add_data(&buf, &test_pkt[0], 162);
    ASSERT_EQ(n, -1);
    ASSERT_EQ(buf.length, 0);


    sbuf_release(&buf);


    sbuf_create_stack(&buf, 144);
    n = sbuf_add_data(&buf, &test_pkt[0], 123);
    ASSERT_EQ(n, 123);
    ASSERT_EQ(buf.length, 123);

    n = sbuf_add_data(&buf, &test_pkt[0], 17);
    ASSERT_EQ(n, 140);
    ASSERT_EQ(buf.length, 140);

    n = sbuf_add_data(&buf, &test_pkt[0], 5);
    ASSERT_EQ(n, -1);
    ASSERT_EQ(buf.length, 140);



;

   

}


